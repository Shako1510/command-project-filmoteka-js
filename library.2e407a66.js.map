{"mappings":"woBAAe,MAAMA,EAOkBC,SAA5BC,GACP,MAAMC,EAAmBC,aAAaC,QAAQH,GAC9C,OAAOI,KAAKC,MAAMJ,E,CAIiBK,SAA5BN,EAAKO,GACZ,MAAMC,EAAaJ,KAAKK,UAAUF,GAElC,OADAL,aAAaQ,QAAQV,EAAKQ,GACnB,I,CAIkFG,UAAjFX,EAAKY,EAAO,GACpB,MAAMC,EAASC,KAAKf,SAASC,GACvBe,EAAaD,KAAKE,cAAcH,GACtCI,QAAQC,IAAI,OAAQN,GACpB,MAAMO,EAAS,CACbN,OAAQC,KAAKM,kBAAkBR,EAAMC,G,KACrCD,E,WACAG,GAGF,OADAE,QAAQC,IAAIC,GACLA,C,CAITE,SAASrB,EAAKO,GACZ,IACE,MAAMe,EAAoBR,KAAKH,UAAUX,GAAKa,OAE9C,OADAS,EAAkBC,KAAKhB,GAChBO,KAAKR,SAASN,EAAKsB,E,CAC1B,MAAOE,GACPP,QAAQC,IAAIM,EAAMC,MAClBR,QAAQC,IAAIM,EAAME,Q,EAItBC,YAAY3B,EAAK4B,GACf,MAAMN,EAAoBR,KAAKH,UAAUX,GAAKa,OAExCgB,EADuBP,EAAkBQ,KAAIC,GAAQA,EAAKH,KACrBI,QAAQJ,GAC/CC,GAAiB,IACnBP,EAAkBW,OAAOJ,EAAe,GACxCf,KAAKR,SAASN,EAAKsB,G,CAIvBN,cAAcH,GACZ,OAAOqB,KAAKC,KAAKtB,EAAOuB,OAAS,G,CAGnChB,kBAAkBR,EAAMyB,GAEtB,IAAIC,EADY,IACH1B,EAAO,GAChB2B,EAAMD,EAFM,GAIhB,OADArB,QAAQC,IAAIoB,EAAOC,GACZF,EAAMG,MAAMF,EAAOC,E,CAG5BE,aAAaJ,GACX,MAAMK,EAAS5B,KAAKf,SAAS,UAC7B,OAAOsC,EACJP,KAAIF,GAAMc,EAAOC,MAAKC,GAAWA,EAAQhB,KAAOA,MAChDE,KAAIC,GAAQA,EAAKN,M,CAGtBoB,WAAWjB,GACT,IACIN,EACAwB,EAFAC,EAAwB,KAa5B,OAVAzB,EAAoBR,KAAKH,UAAU,WAAWE,OAC9CiC,EAAuBxB,EAAkBQ,KAAIC,GAAQA,EAAKH,KACtDkB,EAAqBE,SAASpB,KAChCmB,EAAwB,WAE1BzB,EAAoBR,KAAKH,UAAU,SAASE,OAC5CiC,EAAuBxB,EAAkBQ,KAAIC,GAAQA,EAAKH,KACtDkB,EAAqBE,SAASpB,KAChCmB,EAAwB,SAEnBA,C,CAvFTE,cACOnC,KAAKf,SAAS,YAAYe,KAAKR,SAAS,UAAW,IAAI4C,OAAO,KAC9DpC,KAAKf,SAAS,UAAUe,KAAKR,SAAS,QAAS,IAAI4C,OAAO,I","sources":["src/js/services/local-storage-api.js"],"sourcesContent":["export default class LocalStorageAPI {\n  constructor() {\n    if (!this.loadData('watched')) this.saveData('watched', new Object([]));\n    if (!this.loadData('queue')) this.saveData('queue', new Object([]));\n  }\n\n  // Отримання даних за ключем. Повертає дані, або null\n  loadData(key) {\n    const localStorageData = localStorage.getItem(key);\n    return JSON.parse(localStorageData);\n  }\n\n  // Запис даних до сховища. Записує дані з ключем key\n  saveData(key, value) {\n    const dataToSave = JSON.stringify(value);\n    localStorage.setItem(key, dataToSave);\n    return 'ok';\n  }\n\n  // Отримання колекції фільмів. Повертає масив фільмів, або порожній масив з його попереднім записом до сховища\n  getMovies(key, page = 1) {\n    const movies = this.loadData(key); // отр\n    const totalPages = this.getTotalPages(movies);\n    console.log('PAGE', page);\n    const result = {\n      movies: this.getPaginationPage(page, movies),\n      page,\n      totalPages,\n    };\n    console.log(result);\n    return result;\n  }\n\n  // Додавання фільмів до колекції. Додає новий елемент до поточної колекції фільмів у сховищі\n  setMovie(key, value) {\n    try {\n      const currentCollection = this.getMovies(key).movies;\n      currentCollection.push(value);\n      return this.saveData(key, currentCollection);\n    } catch (error) {\n      console.log(error.name);\n      console.log(error.message);\n    }\n  }\n\n  removeMovie(key, id) {\n    const currentCollection = this.getMovies(key).movies;\n    const currentCollectionIds = currentCollection.map(item => item.id);\n    const indexToRemove = currentCollectionIds.indexOf(id);\n    if (indexToRemove >= 0) {\n      currentCollection.splice(indexToRemove, 1);\n      this.saveData(key, currentCollection);\n    }\n  }\n\n  getTotalPages(movies) {\n    return Math.ceil(movies.length / 20);\n  }\n\n  getPaginationPage(page, array) {\n    const perPage = 20;\n    let start = (page - 1) * perPage;\n    let end = start + perPage;\n    console.log(start, end);\n    return array.slice(start, end);\n  }\n\n  createGenres(array) {\n    const genres = this.loadData('genres');\n    return array\n      .map(id => genres.find(element => element.id === id))\n      .map(item => item.name);\n  }\n\n  checkMovie(id) {\n    let isMovieInLocalStorage = 'no';\n    let currentCollection;\n    let currentCollectionIds;\n    currentCollection = this.getMovies('watched').movies;\n    currentCollectionIds = currentCollection.map(item => item.id);\n    if (currentCollectionIds.includes(id)) {\n      isMovieInLocalStorage = 'watched';\n    }\n    currentCollection = this.getMovies('queue').movies;\n    currentCollectionIds = currentCollection.map(item => item.id);\n    if (currentCollectionIds.includes(id)) {\n      isMovieInLocalStorage = 'queue';\n    }\n    return isMovieInLocalStorage;\n  }\n}\n"],"names":["$c823243da5249566$export$2e2bcd8739ae039","loadData","key","localStorageData","localStorage","getItem","JSON","parse","saveData","value","dataToSave","stringify","setItem","getMovies","page","movies","this","totalPages","getTotalPages","console","log","result","getPaginationPage","setMovie","currentCollection","push","error","name","message","removeMovie","id","indexToRemove","map","item","indexOf","splice","Math","ceil","length","array","start","end","slice","createGenres","genres","find","element","checkMovie","currentCollectionIds","isMovieInLocalStorage","includes","constructor","Object"],"version":3,"file":"library.2e407a66.js.map"}