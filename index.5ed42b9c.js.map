{"mappings":"oeACAA,EAAA,SCAA,MAAMC,EAAmB,IAAI,GAD7BC,EAAAF,EAAA,UAC6BG,SAEvBC,EAAuBC,SAASC,cAAc,qBAC9CC,EAAYF,SAASC,cAAc,gBACnCE,EAAWH,SAASC,cAAc,qBAClCG,EAAQJ,SAASC,cAAc,iBA+CrCI,eAAeC,EAAaC,GAC1B,IAGE,MAAMC,QAAaZ,EAAiBa,oBAAoBF,GACxDG,QAAQC,IAAIH,GAEZ,MAAMI,QAnDQ,SAAEJ,GAClB,MAAMI,EAAS,qXAQoCJ,EAAKK,2PAI0BL,EAAKM,2FAC5BN,EAAKO,8PAKhBP,EAAKQ,2PAKLR,EAAKS,6OAKLT,EAAKU,yLAIDV,EAAKW,0TAQzD,OAAOf,EAAMgB,mBAAmB,YAAaR,E,CAUtBS,CAAWb,GAChC,OAAOI,C,CAEP,MAAOU,GACPZ,QAAQY,MAAMA,E,EAkBlB,SAASC,IACPnB,EAAMoB,UAAY,GAClBC,OAAOC,oBAAoB,UAAWC,GACtCzB,EAAU0B,UAAUC,OAAO,U,CAWkE,SAAtFF,EAAcG,GACJ,WAAbA,EAAIC,MACNR,G,CA5BmDxB,EAAlCiC,iBAAiB,SACtC,SAAsBF,GAEpB,GADAA,EAAIG,iBACAH,EAAII,OAAOC,QAAQ,SAAU,CAC/BV,OAAOO,iBAAiB,UAAWL,GACnCzB,EAAU0B,UAAUQ,IAAI,WACxB1B,QAAQC,IAAI,MAEZL,EADewB,EAAIO,WAAWC,cAAc/B,G,KAWRL,EAA9B8B,iBAAiB,SAC3B,SAAyBF,GACnBA,EAAIS,gBAAkBT,EAAII,QAC5BX,G,IAWJpB,EAAS6B,iBAAiB,QAAST,G,sBCtGnC,IAAA1B,EAAAF,EAAA,S,aAGA,MAAM6C,EAAmB,IAAI,EAAA3C,EAAAC,SAEvB2C,EAAazC,SAASC,cAAc,gBACpCyC,EAAe1C,SAASC,cAAc,iBAE5CwC,EAAWT,iBAAiB,UAC5B3B,eAA4BsC,GAI1B,GAHAA,EAAEV,iBACFS,EAAad,UAAUQ,IAAI,sBAC3BI,EAAiBI,YAAcD,EAAEJ,cAAcM,SAASC,MAAMC,MAAMC,OAEjC,OAAjCR,EAAiBI,aACgB,KAAjCJ,EAAiBI,YAEjB,OAEF,IAIE,GAAoC,WAHTJ,EAAiBS,mBAC1CT,EAAiBI,cAEFM,QAAQC,OAGvB,OAFAT,EAAad,UAAUC,OAAO,2BAC9BY,EAAWW,SAGb,EAAAC,EAAAC,UAASd,EAAiBI,Y,CAC1B,MAAOtB,GACPZ,QAAQC,IAAIW,E,CAEdmB,EAAWW,O,eC3Bb,MAAMG,EAAW,IAAI,GAFrB1D,EAAAF,EAAA,UAEqBG,SAUrBY,QAAQC,IARRN,iBACE,UAAyBkD,EAAS9C,qB,CAEhC,MAAOa,GACPZ,QAAQC,IAAIW,E,EAIJkC,IAEZ,MCjBMC,EAAQzD,SAASC,cAAc,UAC/ByD,EAAa1D,SAASC,cAAc,0BACpC0D,EAAc3D,SAASC,cAAc,UAC3CyD,EAAW1B,iBAAiB,SAAS,WACjCyB,EAAM7B,UAAUQ,IAAI,aACpBqB,EAAM7B,UAAUC,OAAO,Y,IAI3B8B,EAAY3B,iBAAiB,SAAS,WAClCyB,EAAM7B,UAAUC,OAAO,aACvB4B,EAAM7B,UAAUQ,IAAI,Y","sources":["src/index.js","src/js/services/modal.js","src/js/services/inputHandler.js","src/js/services/local-storage-api.js","src/js/services/team-modal.js"],"sourcesContent":["\nimport './js/services/buttonLibraryHandler';\nimport \"./js/services/modal\";\nimport './js/services/moviesAPIService';\nimport './js/services/paginationHandler';\nimport './js/services/inputHandler';\nimport './js/services/card';\nimport './js/services/local-storage-api';\nimport './js/services/team-modal';\n\n\n\n\n\n// const moviesApiService = new MoviesApiService();\n\n// console.log(moviesApiService);\n\n// const pagination = new PaginationHandler(\n//   21,\n//   document.querySelector('.pagination__root')\n// );\n\n// pagination.initPagination();\n\n\n// pagination.addEventListener('pageChanged', pageNumber =>\n//   console.log('choosenPage is: ', pageNumber)\n// );\n\n// // inputHandler() Анастасія - параметром сюди передайте свою функцію по рендерінгу, і має спрацювати\n// inputHandler(appendGallery);","import MoviesApiService from './moviesAPIService';\nconst moviesApiService = new MoviesApiService();\n\nconst openModalDescription = document.querySelector('.collection__list');\nconst showModal = document.querySelector('[data-modal]');\nconst closeBtn = document.querySelector('.modal-close__btn');\nconst modal = document.querySelector('.modal-window');\n\n// Підтягування id фільму\nfunction makeMarkup(data) {\n  const markup = `\n        <div class=\"modal-conteiner\">\n            <div class=\"modal-container__banner\">\n                <img class=\"modal-container__img\" src=\"\"\n                    alt=\"Banner of the selected film\">\n            </div>\n            <div class=\"modal-container__row\">\n                <table class=\"modal-table\">\n                    <h2 class=\"modal-table__title\">${data.title}</h2>\n                    <tr class=\"table__row\">\n                        <td class=\"table__description\">Vote / Votes</td>\n                        <td></td>\n                        <td class=\"table__data\"><span class=\"table-data__raiting\">${data.vote_average}</span> / <span\n                                class=\"table-data__scores\">${data.vote_count}</span></td>\n                    </tr>\n                    <tr class=\"table__row\">\n                        <td class=\"table__description\">Popularity</td>\n                        <td></td>\n                        <td class=\"table__data\">${data.popularity}</td>\n                    </tr>\n                    <tr class=\"table__row\">\n                        <td class=\"table__description\">Original Title</td>\n                        <td></td>\n                        <td class=\"table__data\">${data.original_title}</td>\n                    </tr>\n                    <tr class=\"table__row\">\n                        <td class=\"table__description\">Genre</td>\n                        \n                        <td class=\"table__data\">${data.genre_ids}</td>\n                    </tr>\n                </table>\n                <p class=\"modal-container__title\">ABOUT</p>\n                <p class=\"modal-title__description\">${data.overview}</p>\n                <div class=\"modal-conteiner__btn\">\n                    <button type=\"button\" class=\"modal-conteiner__first-btn\">add to Watched</button>\n                    <button type=\"button\" class=\"modal-conteiner__second-btn\">add to queue</button>\n                </div>\n            </div>`;\n\n    // return modal.innerHTML = markup;\n  return modal.insertAdjacentHTML(\"beforeend\", markup)\n}\n\nasync function searchedData(id) {\n  try {\n    // const dataForModalInLocal = localStorage.getItem(\"fetchedMovies\");\n    // const parceDataForModalInLocal = JSON.parse(dataForModalInLocal)\n    const data = await moviesApiService.fetchTrendingMovies(id);\n    console.log(data)\n  \n    const markup = await makeMarkup(data);\n    return markup;\n\n  } catch (error) {\n    console.error(error);\n  }\n}\n\n\n// Додаємо слухача і відкриваємо модальне вікно при кліку на картку\nopenModalDescription.addEventListener('click', onModalClick);\nfunction onModalClick(evt) {\n  evt.preventDefault();\n  if (evt.target.closest('.card')) {\n    window.addEventListener('keydown', onEscKeyPress);\n    showModal.classList.add('is-open');\n    console.log(\"he\")\n    const filmId = evt.srcElement.parentElement.id;\n    searchedData(filmId);\n  };\n};\n\nfunction onModalClose() {\n  modal.innerHTML = \"\";\n  window.removeEventListener('keydown', onEscKeyPress);\n  showModal.classList.remove('is-open');\n}\n// Закриваємо модальне вікно при кліку на бекдроп\nshowModal.addEventListener('click', onBackdropClick);\nfunction onBackdropClick(evt) {\n  if (evt.currentTarget === evt.target) {\n    onModalClose();\n  }\n}\n// Закриття модального вікна при кліку на ESC (події клавіатури обробляються на документі, а не на конкретному елементі)\n\nfunction onEscKeyPress(evt) {\n  if (evt.code === 'Escape') {\n    onModalClose();\n  }\n}\n// Закриваємо модальне вікно при кліку на кнопку\ncloseBtn.addEventListener('click', onModalClose);\n","import MoviesApiService from './moviesAPIService';\nimport { getQuery } from './card';\n\nconst moviesApiService = new MoviesApiService();\n\nconst searchForm = document.querySelector('#search-form');\nconst notification = document.querySelector('.form-warning');\n\nsearchForm.addEventListener('submit', onFormSubmit);\nasync function onFormSubmit(e) {\n  e.preventDefault();\n  notification.classList.add('form-warning--hide');\n  moviesApiService.searchQuery = e.currentTarget.elements.query.value.trim();\n  if (\n    moviesApiService.searchQuery === null ||\n    moviesApiService.searchQuery === ``\n  ) {\n    return;\n  }\n  try {\n    const movieByQuert = await moviesApiService.fetchMoviesByQuery(\n      moviesApiService.searchQuery\n    );\n    if (movieByQuert.results.length === 0) {\n      notification.classList.remove('form-warning--hide');\n      searchForm.reset();\n      return;\n    }\n    getQuery(moviesApiService.searchQuery);\n  } catch (error) {\n    console.log(error);\n  }\n  searchForm.reset();\n}","\n// export default localStorageAPI\n\nimport fetch from './moviesAPIService';\n\nconst getFilms = new fetch();\n\nasync function fetchMovie(){\n  try { const data = await getFilms.fetchTrendingMovies();\n    \n  } catch (error) {\n    console.log(error);\n  }\n}\n\nconsole.log(fetchMovie());\n\nconst LocalStorageAPI =  {\n\n  // Отримання даних за ключем. Повертає дані(об єкт), або null\n  loadData(key) {\n    const localStorageData = localStorage.getItem(key);\n    return JSON.parse(localStorageData);\n  },\n\n  // Запис даних до сховища. Записує дані з ключем key\n  saveData(key, value) {\n    const dataToSave = JSON.stringify(value);\n    localStorage.setItem(key, dataToSave);\n     \n    // витягнути масив через лоад дата із локал стредж\n    // через пуш дозаписати \n  },\n\n  // Отримання колекції фільмів. Повертає масив фільмів, або порожній масив з його попереднім записом до сховища\n  getMovies(key, page) {\n    const movies = this.loadData(key); // отр \n    const totalPages = this.getTotalPage(movies);\n    const result = {movies: this.getPaginationPage(movies, page), totalPages};\n\n    // if (!movies) {\n    //   this.saveData(key, []);\n    //   return [];\n    // } else {\n      return result;\n  }, \n  // має повертати масив муві та тотал пейдж (якщо масив більше 20)\n  // Додавання фільмів до колекції. Додає новий елемент до поточної колекції фільмів у сховищі\n  \n  setMovie(key, value) {\n    const currentCollection = this.getMovies(key);\n    currentCollection.push(value);\n\n    this.saveData(key, currentCollection);\n    // return \n    // try catch \n    //перевірити для відкриття, закриття модалки , \n    // певернути статус коли ОК - закрили модалку, якщо ні - то, перший запис\n  },\n\n  removeMovie(key, value) {\n    const currentCollection = this.getMovies(key);\n    const indexToRemove = currentCollection.indexOf(value);\n\n    if (indexToRemove >= 0) {\n      currentCollection.splice(indexToRemove, 1);\n      this.saveData(key, currentCollection);\n    }\n  },\n\n  getTotalPages(movies) {\n      return Math.ceil(movies.length / 20);\n    },\n\n    getPaginationPage(page, array ){\n\n     const perPage = 20;\n     let start = (page - 1) * perPage;\n     let end = start + perPage;\n     return array.slice(start, end);\n    \n    },\n    \n  getGenres(key){\n\n    myArray = this.loadData(key);\n\n  }\n};\n\n     ","const modal = document.querySelector(`.modal`);\nconst openButton = document.querySelector(`.footer-text-underline`);\nconst closeButton = document.querySelector(`.close`);\nopenButton.addEventListener(\"click\", function(){\n    modal.classList.add(\"is-active\");\n    modal.classList.remove(\"is-hidden\");\n   \n    \n})\ncloseButton.addEventListener(\"click\", function(){\n    modal.classList.remove(\"is-active\");\n    modal.classList.add(\"is-hidden\");\n})"],"names":["parcelRequire","$224647823b928c88$var$moviesApiService","$bF2Xj","default","$224647823b928c88$var$openModalDescription","document","querySelector","$224647823b928c88$var$showModal","$224647823b928c88$var$closeBtn","$224647823b928c88$var$modal","async","$224647823b928c88$var$searchedData","id","data","fetchTrendingMovies","console","log","markup","title","vote_average","vote_count","popularity","original_title","genre_ids","overview","insertAdjacentHTML","$224647823b928c88$var$makeMarkup","error","$224647823b928c88$var$onModalClose","innerHTML","window","removeEventListener","$224647823b928c88$var$onEscKeyPress","classList","remove","evt","code","addEventListener","preventDefault","target","closest","add","srcElement","parentElement","currentTarget","$67cf942eaf44f4ee$var$moviesApiService","$67cf942eaf44f4ee$var$searchForm","$67cf942eaf44f4ee$var$notification","e","searchQuery","elements","query","value","trim","fetchMoviesByQuery","results","length","reset","$aKPyQ","getQuery","$c823243da5249566$var$getFilms","$c823243da5249566$var$fetchMovie","$67f7713c72e2f031$var$modal","$67f7713c72e2f031$var$openButton","$67f7713c72e2f031$var$closeButton"],"version":3,"file":"index.5ed42b9c.js.map"}